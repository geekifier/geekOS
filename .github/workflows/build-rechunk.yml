---
name: Build container image with rechunk
"on":
  pull_request:
    branches:
      - main
    paths-ignore: &ignorePaths
      - '**.md'
      - '/assets/**'
      - '.github/workflows/build_iso*.yml'
  schedule:
    - cron: '05 10 * * *'  # 10:05am UTC everyday
  push:
    branches:
      - main
    paths-ignore: *ignorePaths
  workflow_dispatch:

env:
  DEFAULT_BRANCH: main
  IMAGE_DESC: 'geekOS Bazzite Image'
  IMAGE_KEYWORDS: 'bootc,ublue,universal-blue,bazzite,geekos,custom'
  IMAGE_LOGO_URL: 'https://raw.githubusercontent.com/geekifier/geekos/main/assets/img/geekos_cropped.png'
  PULL_IMAGE_REGISTRY: ghcr.io/ublue-os
  PUSH_IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  SOURCE_IMAGE_TAG: stable
  PR_ID: ${{ github.event.pull_request.number || null }}
  # Rechunk OCI image pinned by digest.
  # Do NOT add inline comments on the value line; this string is interpolated into shell commands
  # inside the composite action, and a '#' would terminate the line unexpectedly.
  #               v1.2.3
  RECHUNK_IMAGE: "ghcr.io/hhd-dev/rechunk@sha256:51ffc4c31ac050c02ae35d8ba9e5f5e518b76cfc9b37372df4b881974978443c"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_push:
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        image_map:
          # disabling nvidia for now
          # - 'bazzite-gnome-nvidia-open:geekos-nvidia'
          - 'bazzite-gnome:geekos'
        image_tags: 
          - stable
          - testing
    name: ${{ format('build:{0}:{1}', matrix.image_map, matrix.image_tags) }}
    steps:
      - name: Set build variables
        id: build_setup
        run: |
          # Split the matrix input into source and target image names
          IFS=: read -r SOURCE_IMAGE TARGET_IMAGE <<< "${{ matrix.image_map }}"
          # Output registry and image names to env in lowercase
          echo "PUSH_IMAGE_REGISTRY=${PUSH_IMAGE_REGISTRY,,}" >> ${GITHUB_ENV}
          echo "SOURCE_IMAGE_NAME=${SOURCE_IMAGE,,}" >> ${GITHUB_ENV}
          echo "TARGET_IMAGE_NAME=${TARGET_IMAGE,,}" >> ${GITHUB_ENV}
          PUSH_IMAGE="${{ github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}"
          echo "push_image=${PUSH_IMAGE:-false}" >> ${GITHUB_OUTPUT}

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Mount BTRFS for podman storage
        uses: ublue-os/container-storage-action@main

      - name: Get current date
        id: date
        run: |
          # This generates a timestamp like what is defined on the ArtifactHub documentation
          # E.G: 2022-02-08T15:38:15Z'
          # https://artifacthub.io/docs/topics/repositories/container-images/
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@cc0becac701cf642c8f0a6613bbdaf5dc36b259e #v9
        with:
          remove-cached-tools: false
          remove-docker-images: false
          remove-large-packages: false

      - name: Pull image dependencies
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            sudo podman pull ${{ env.PULL_IMAGE_REGISTRY }}/${{ env.SOURCE_IMAGE_NAME }}:${{ matrix.image_tags }}
            sudo podman pull ${{ env.RECHUNK_IMAGE }}

      - name: Set base tag name
        id: set_base
        run: |
          # if matrix.image_tags == 'testing', reset the value to avoid duplicate prefixes
          TAG_PREFIX=${{ matrix.image_tags }}
          PR_PREFIX=${{ env.PR_ID && format('pr{0}-', env.PR_ID) || ''}}
          BRANCH_PREFIX=${{ format('{0}-', github.ref_name) }}
          # Set a base_tag that will be used as a previous_ref reference for rechunk, and for changelog
          # purposes.
          echo "base_tag=${PR_PREFIX:=${{ github.ref_name }}}${TAG_PREFIX}" >> "$GITHUB_OUTPUT"

      - name: Parse source image metadata
        id: get_source_image
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eo pipefail
            skopeo inspect docker://${{ env.PULL_IMAGE_REGISTRY }}/${{ env.SOURCE_IMAGE_NAME }}:${{ matrix.image_tags }}> source.json
            ver=$(jq -r '.Labels["org.opencontainers.image.version"]' source.json)
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "inspected image version must not be empty or null"
              exit 1
            fi
            echo "version=$ver" >> $GITHUB_OUTPUT

      - name: Export source image metadata
        id: source_image
        run: echo "version=${{ fromJSON(steps.get_source_image.outputs.outputs).version }}" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: metadata
        with:
          tags: |
            # if pushed to DEFAULT_BRANCH and not tagged as testing, tag with `edge`
            type=edge,enable=${{ matrix.image_tags != 'testing' }},priority=700,prefix=,suffix=,branch=${{ env.DEFAULT_BRANCH }}
            # tag with base_tag for all builds
            #   base_tag: pr{PR_ID}|ref_name-{source_image_tag}
            type=raw,enable=true,value=${{ steps.set_base.outputs.base_tag }}
            # tag with base tag and upstream version
            type=raw,enable=true,value=${{ steps.set_base.outputs.base_tag }}-${{ steps.source_image.outputs.version }}
            # tag with upstream version and .YYMMDD suffix when pushed to DEFAULT_BRANCH
            type=raw,enable=${{ github.ref_name == env.DEFAULT_BRANCH }},value=${{ steps.source_image.outputs.version }}.{{date 'YYMMDD'}}
            # tag with upstream tag (stable, testing, etc) when pushed to DEFAULT_BRANCH
            type=raw,enable=${{ github.ref_name == env.DEFAULT_BRANCH }},value=${{ matrix.image_tags }},priority=600
            # tag with truncated sha256 checksum for PRs
            type=sha,enable=${{ github.event_name == 'pull_request' }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/main/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/blob/main/Containerfile
            org.opencontainers.image.title=${{ env.TARGET_IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.source_image.outputs.version }}.{{date 'YYMMDD'}}
            io.artifacthub.package.deprecated=false
            io.artifacthub.package.keywords=${{ env.IMAGE_KEYWORDS }}
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=${{ env.IMAGE_LOGO_URL }}
            io.artifacthub.package.prerelease=${{ github.event_name == 'pull_request' && true || false }}
            containers.bootc=1
          sep-tags: ' '
          sep-annotations: ' '

      - name: Build Image
        id: build_image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo -E buildah build \
            --target "${{ env.TARGET_IMAGE_NAME }}" \
            --build-arg "SOURCE_IMAGE_NAME=${{ env.SOURCE_IMAGE_NAME }}" \
            --build-arg "TARGET_IMAGE_NAME=${{ env.TARGET_IMAGE_NAME }}" \
            --build-arg "SOURCE_IMAGE_TAG=${{ matrix.image_tags }}" \
            --secret "id=GITHUB_TOKEN,env=GITHUB_TOKEN" \
            --tag pre-rechunk \
            --tag '${{ env.TARGET_IMAGE_NAME }}:${{ fromJSON(steps.metadata.outputs.json).labels['org.opencontainers.image.version'] }}' \
            ./Containerfile

      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Run Rechunker
        id: rechunk
        # Also update the RECHUNK_IMAGE env var to match the image name and ref for this commit!
        uses: hhd-dev/rechunk@ded27feba22df48134eece2c66ba0fca1289ff40 # v1.2.3
        with:
          rechunk: ${{ env.RECHUNK_IMAGE }}
          ref: 'pre-rechunk'
          prev-ref: '${{ env.PUSH_IMAGE_REGISTRY }}/${{ env.TARGET_IMAGE_NAME }}:${{ steps.set_base.outputs.base_tag }}'
          revision: '${{ github.sha }}'
          version: "${{ fromJSON(steps.metadata.outputs.json).labels['org.opencontainers.image.version'] }}"
          labels: |
            ${{ steps.metadata.outputs.labels }}
            org.universal-blue.pkg.kernel=<relver:kernel>
          git: '${{ github.workspace }}'
          changelog: |
            # geekOS <pretty>
            ## Version: <version>

            Major Components:
              - Kernel: <relver:kernel>
              - Gamescope: <relver:gamescope>
              - Gnome: <version:gnome-shell>
              - Mesa: <version:mesa-dri-drivers>

            ## Changes since last version (<previous>):
            ### Commits
            <commits>
            ### Package Changes:
            <pkgupd>

          formatters: |
            commits.none=No changes\n
            commits.commit=- **[<short>](https://github.com/geekifier/geekos/commit/<hash>)** <subject>\n
            pkgupd.none=No package updates\n
            pkgupd.add=- **<package>** Added at <new>\n
            pkgupd.update=- **<package>** <old> → <new>\n
            pkgupd.remove=- **<package>** <old> → Removed\n

      - name: Print changelog
        run: |
          sudo cat ${{ steps.rechunk.outputs.changelog }} | tee -a $GITHUB_STEP_SUMMARY

      - name: Push OCI layout to GHCR
        id: push
        if: ${{ steps.build_setup.outputs.push_image == 'true' }}
        env:
          TAGS: ${{ steps.metadata.outputs.tags }}
          REF: ${{ steps.rechunk.outputs.ref }}
        run: |
          log_sum() { echo "$1" >> $GITHUB_STEP_SUMMARY; }
          log_sum '# Push to GHCR result'
          log_sum '```'
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo podman login ghcr.io -u ${{ github.actor }} --password-stdin
          for tag in ${{ steps.metadata.outputs.tags }}; do
            dest_image="${{ env.PUSH_IMAGE_REGISTRY }}/${{ env.TARGET_IMAGE_NAME }}:$tag"
            sudo skopeo copy ${{ steps.rechunk.outputs.ref }} docker://$dest_image && 
              log_sum "$dest_image"
          done
          log_sum '```'

      - name: Get Image Digest
        id: final_digest
        run: |
          # Get digest for signing
          DIGEST=$(sudo skopeo inspect --format '{{.Digest}}' ${{ steps.rechunk.outputs.ref }})
          echo "Digest is: $DIGEST"
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT

      - name: Install Cosign
        if: ${{ steps.build_setup.outputs.push_image == 'true' }}
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Login to GHCR for cosign
        if: ${{ steps.build_setup.outputs.push_image == 'true' }}
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign container image
        if: ${{ steps.build_setup.outputs.push_image == 'true' }}
        run: |
          IMAGE_FULL="${PUSH_IMAGE_REGISTRY}/${TARGET_IMAGE_NAME}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY "${IMAGE_FULL}@${DIGEST}"
        env:
          DIGEST: ${{ steps.final_digest.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
