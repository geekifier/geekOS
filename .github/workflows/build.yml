---
name: Build container image
on:
  workflow_dispatch:

env:
  IMAGE_DESC: 'geekOS Bazzite Image'
  IMAGE_KEYWORDS: 'bootc,ublue,universal-blue,bazzite,geekos,custom'
  IMAGE_LOGO_URL: 'https://raw.githubusercontent.com/geekifier/geekos/master/assets/img/geekos_cropped.png'
  PULL_IMAGE_REGISTRY: ghcr.io/ublue-os
  PUSH_IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  SOURCE_IMAGE_TAG: stable
  DEFAULT_BRANCH: master
  PR_ID: ${{ github.event.pull_request.number || null }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        image_map:
          [bazzite-gnome:geekos, bazzite-gnome-nvidia-open:geekos-nvidia]

    steps:
      - name: Set source and target image names
        id: build_setup
        run: |
          # Split the matrix input into source and target image names
          IFS=: read -r SOURCE_IMAGE TARGET_IMAGE <<< "${{ matrix.image_map }}"
          # Output registry and image names to env in lowercase
          echo "PUSH_IMAGE_REGISTRY=${PUSH_IMAGE_REGISTRY,,}" >> ${GITHUB_ENV}
          echo "SOURCE_IMAGE_NAME=${SOURCE_IMAGE,,}" >> ${GITHUB_ENV}
          echo "TARGET_IMAGE_NAME=${TARGET_IMAGE,,}" >> ${GITHUB_ENV}
          PUSH_IMAGE="${{ github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}"
          echo "push_image=${PUSH_IMAGE:-false}" >> ${GITHUB_OUTPUT}

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Mount BTRFS for podman storage
        uses: ublue-os/container-storage-action@main

      - name: Get current date
        id: date
        run: |
          # This generates a timestamp like what is defined on the ArtifactHub documentation
          # E.G: 2022-02-08T15:38:15Z'
          # https://artifacthub.io/docs/topics/repositories/container-images/
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      - name: Set base tag name
        id: set_base
        run: |
          echo "base_tag=${{ env.PR_ID && format('pr{0}', env.PR_ID) || github.ref_name }}" >> "$GITHUB_OUTPUT"

      - name: Parse source image metadata
        id: get_source_image
        uses: Wandalen/wretry.action@e68c23e6309f2871ca8ae4763e7629b9c258e1ea # v3.8.0
        with:
          attempt_limit: 3
          attempt_delay: 15000
          command: |
            set -eo pipefail
            skopeo inspect docker://${{ env.PULL_IMAGE_REGISTRY }}/${{ env.SOURCE_IMAGE_NAME }}:${{ env.SOURCE_IMAGE_TAG }} > source.json
            ver=$(jq -r '.Labels["org.opencontainers.image.version"]' source.json)
            if [ -z "$ver" ] || [ "null" = "$ver" ]; then
              echo "inspected image version must not be empty or null"
              exit 1
            fi
            echo "version=$ver" >> $GITHUB_OUTPUT

      - name: Export source image metadata
        id: source_image
        run: echo "version=${{ fromJSON(steps.get_source_image.outputs.outputs).version }}" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: metadata
        with:
          tags: |
            type=raw,value=${{ steps.set_base.outputs.base_tag }}-${{ steps.source_image.outputs.version }}
            type=raw,value=${{ steps.set_base.outputs.base_tag }}.{{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=edge,enable=true,priority=700,prefix=,suffix=,branch=${{ env.DEFAULT_BRANCH }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/${{ env.DEFAULT_BRANCH }}/README.md
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository }}/refs/heads/${{ env.DEFAULT_BRANCH }}/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/blob/${{ env.DEFAULT_BRANCH }}/Containerfile
            org.opencontainers.image.title=${{ env.TARGET_IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.source_image.outputs.version }}.{{date 'YYYYMMDD'}}
            io.artifacthub.package.deprecated=false
            io.artifacthub.package.keywords=${{ env.IMAGE_KEYWORDS }}
            io.artifacthub.package.license=Apache-2.0
            io.artifacthub.package.logo-url=${{ env.IMAGE_LOGO_URL }}
            io.artifacthub.package.prerelease=${{ github.event_name == 'pull_request' && true || false }}
            containers.bootc=1
          sep-tags: ' '
          sep-annotations: ' '

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          containerfiles: |
            ./Containerfile
          # Postfix image name with -custom to make it a little more descriptive
          # Syntax: https://docs.github.com/en/actions/learn-github-actions/expressions#format
          image: '${{ env.TARGET_IMAGE_NAME }}'
          tags: '${{ steps.metadata.outputs.tags }}'
          labels: '${{ steps.metadata.outputs.labels }}'
          layers: true
          oci: false
          extra-args: |
            --target ${{ env.TARGET_IMAGE_NAME }}
          # Did not observe much performance impact from ghcr.io caching, will revisit.
          # extra-args: |
          #   --cache-to ${{ env.PUSH_IMAGE_REGISTRY }}/cache/${{ env.TARGET_IMAGE_NAME }}
          #   --cache-from ${{ env.PUSH_IMAGE_REGISTRY }}/cache/${{ env.TARGET_IMAGE_NAME }}
          build-args: |
            SOURCE_IMAGE_NAME=${{ env.SOURCE_IMAGE_NAME }}
            TARGET_IMAGE_NAME=${{ env.TARGET_IMAGE_NAME }}

      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        if: steps.build_setup.outputs.push_image == 'true'
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          registry: ${{ env.PUSH_IMAGE_REGISTRY }}
          image: ${{ env.TARGET_IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)

      - name: Sign container image
        if: steps.build_setup.outputs.push_image == 'true'
        run: |
          IMAGE_FULL="${{ env.PUSH_IMAGE_REGISTRY }}/${{ env.TARGET_IMAGE_NAME }}"
          cosign sign -y --key env://COSIGN_PRIVATE_KEY "${IMAGE_FULL}@${DIGEST}"
        env:
          DIGEST: ${{ steps.push.outputs.digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
